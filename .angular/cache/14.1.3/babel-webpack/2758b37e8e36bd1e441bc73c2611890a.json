{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as LoginActios from '../store/login.action';\nimport { error_message_handler } from 'src/app/shared/helper/error-message.handler';\nimport { IAuthResponse } from \"../models/login.interface\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common/http\";\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    constructor(store, http) {\n      this.store = store;\n      this.http = http;\n      this.url = '/api/users';\n      this.subscriptionUser = null;\n      this.getAuthentication();\n    }\n\n    authenticate(userNm, password) {\n      let result = new IAuthResponse();\n      return this.http.get(this.url).pipe(map(response => {\n        let user = response.filter(item => item.userName === userNm && item.password === password);\n\n        if (user && user.length > 0) {\n          if (user[0].isActive) {\n            this.store.dispatch(new LoginActios.AuthenticateUser(user[0]));\n            result.auth = user[0];\n          } else {\n            result.isError = true;\n            result.errorMessage = \"The user is not active. Please contact the system administrator\";\n          }\n        } else {\n          //let customError= {\n          //error:{message_code:''}\n          //}\n          //customError.error.message_code = \"User name or password is not correct.\";\n          result.isError = true;\n          result.errorMessage = \"User name or password is not correct.\";\n        }\n\n        return result;\n      }), catchError(error => {\n        this.store.dispatch(new LoginActios.LogoutUser());\n        result.errorMessage = error_message_handler(error);\n        return throwError(error);\n      }));\n    }\n\n    getAuthentication() {\n      this.subscriptionUser = this.store.select('auth').subscribe(authStore => {\n        this.userAuthenticate = null;\n\n        if (authStore && authStore != null && authStore.auth != null) {\n          this.userAuthenticate = authStore.auth;\n        }\n      });\n    }\n\n  }\n\n  LoginService.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  LoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module"}